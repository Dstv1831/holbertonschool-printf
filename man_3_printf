.TH _PRINTF 3 "November 2024" "_printf Manual" "Holberton School - Custom C Functions"

.SH NAME
_printf \- a custom implementation of the standard printf function.

.SH SYNOPSIS
.B #include "main.h"
.br
.B int _printf(const char *format, ...);

.SH DESCRIPTION
The function
.B _printf()
produces output according to a
.I format
string as described below. It writes output to
.B stdout
(the standard output stream).

.B _printf()
is functionally similar to
.B printf(3),
but it does not support advanced features such as buffer handling, flag characters, field width, precision, or length modifiers.

This function processes a
.I format
string and its corresponding arguments (provided through
.BR stdarg (3)),
converting them to formatted output as specified by the format string. Format specifiers begin with the percent character
.BR %.

.SS "Format String"
The
.I format
string is a sequence of characters that may include:
.IP \(bu
Ordinary characters, which are printed as-is.
.IP \(bu
Conversion specifications, introduced by
.B %
and followed by a conversion specifier (a character indicating the type of argument to print).

Each conversion specification causes
.B _printf()
to process the next argument in the argument list and print it according to the specified format.

.SH RETURN
On success,
.B _printf()
returns the number of characters printed, excluding the null byte. If an output error occurs, the function returns a negative value.

.SH FORMAT SPECIFIERS
Supported format specifiers:

.TP
.BR %c
Prints a single character.

.TP
.BR %s
Prints a string of characters.

.TP
.BR %d , %i
Prints a signed integer in base 10.

.TP
.BR %%
Prints a literal percent character.

.SH PARAMETERS
.TP
.B @ const char *format :
A null-terminated string that contains plain text and format specifiers.
.TP
.B @ ... :
Additional arguments that match the format specifiers in the format string.

.SH USAGE EXAMPLE
The following example demonstrates how to use
.B _printf :

.EX
#include "main.h"

int main(void)
{
    _printf("Character: %c\n", 'A');
    _printf("String: %s\n", "Hello, world!");
    _printf("Integer: %d\n", 123);
    _printf("Percent: %%\n");

    return 0;
}
.EE

Output:
.VB
Character: A
String: Hello, world!
Integer: 123
Percent: %
.VE

.SH LIMITATIONS
.B _printf
does not support all format specifiers available in the standard
.B printf
function (e.g., floating-point, hexadecimal, or scientific notation).

.SH BUGS
.TP
.B _printf("%%d", 123) or other any specifier [c,s,d,i]:
Placing a percentage (%) character between the format specification and conversion specifier results in printing them as separate characters, rather than displaying the corresponding argument value.
.TP
.B _printf("%d %c %i", 123, A) - More conversion specifiers than arguments in the function:
Random values will be outputted to fill in missing arguments corresponding to the extra conversion specifiers.

.SH ERRORS
.B \-1
is returned if the
.B format
string is
.B NULL
or if an incomplete format specifier is encountered.

.SH CONFORMING TO

The _printf() follows the standard
.B ANSI C, C89 C programming language
, any later versions of C programming language may cause syntax errors.

.SH AUTHOR
This custom
.B _printf
This function was developed by David Tangarife, Dew Doan, and Nigel Feng as a project of the Holberton curriculum to deepen the understanding of concepts such as pointers, variadic functions, recursions, and custom C libraries.

.SH SEE ALSO
.B printf(1), printf(3), stdarg(3), string(3), stdlib.h(0p), limits.h(0p).

